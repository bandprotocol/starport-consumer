syntax = "proto3";
package bandprotocol.starportconsumer.consuming;

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/bandprotocol/starport-consumer/x/consuming/types";

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "consuming/calldata.proto";

// Msg defines the Msg service.
service Msg {
    // this line is used by starport scaffolding # proto/tx/rpc
  rpc RequestData(MsgRequestData) returns (MsgRequestDataResponse);
}

// this line is used by starport scaffolding # proto/tx/message
message MsgRequestData {
  string creator = 1;
  int64 oracle_script_id = 2 [
    (gogoproto.customname) = "OracleScriptID",
    (gogoproto.moretags) = "yaml:\"oracle_script_id\""
  ];
  string source_channel = 3;
  Calldata calldata = 4;
  uint64 ask_count = 5;
  uint64 min_count = 6;
  repeated cosmos.base.v1beta1.Coin fee_limit = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  string request_key = 8;
  uint64 prepare_gas = 9;
  uint64 execute_gas = 10;
}

message MsgRequestDataResponse {
}
